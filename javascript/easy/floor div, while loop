Given a number n, find the first digit of the number, without converting to string or using Math.floor()

class Solution {
    firstDigit(num) {
        // code here
       while(num>=10){
           let q=0;
           let temp = num;
           while(temp>=10){
               temp-=10;//division is repeated subtraction
               q++;
           }
           //result of floor divison
// for example if num 98675 , after first outer loop num =9867, after second 986, after 3 d, 98 after 4th 9 and it will be returned
           num = q
       }
       return num
    
    }
}
/////////////////////////

/////////////////////////
In Python, you can do:

print("*", end="")


so it won’t add a newline automatically.

But in JavaScript, console.log() always prints a newline at the end.
There’s no end="" parameter like Python.

Instead, you have two main options:

1. Use process.stdout.write() (Node.js only)
process.stdout.write("*");
process.stdout.write("*");
process.stdout.write("*\n");


This prints *** on one line.

2. Build a string first, then console.log once
let row = "";
for (let i = 0; i < 5; i++) {
    row += "*";
}
console.log(row);  // prints "*****"


This is usually the cleaner way for shapes like squares.
//////////////////////////


function findPattern(s, p) {
    let n = s.length;
    let m = p.length;

    // Edge case: empty pattern
    if (m === 0) return 0;

    // Loop over s, only up to where p could still fit
    for (let i = 0; i <= n - m; i++) {
        let match = true;
        for (let j = 0; j < m; j++) {
            if (s[i + j] !== p[j]) {
                match = false;
                break;
            }
        }
        if (match) return i;
    }

    return -1; // not found
}

// Example
console.log(findPattern("Hello", "llo")); // 2
console.log(findPattern("Hello", "Lo"));  // -1 (case-sensitive)
console.log(findPattern("abcdef", "abc")); // 0


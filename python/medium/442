class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        result =[]
        for i in range(len(nums)):
            num = abs(nums[i])
            idx = num -1 # Compute the index corresponding to this number (1-based to 0-based)
    # If the value at idx is positive, it's the first time we've seen 'num',
    # so negate it to mark as visited
            if nums[idx]>0:
                nums[idx] =-nums[idx]
    # If it's already negative, this is the second occurrence, so it's a duplicate
            else:
                result.append(num)

        return result
        
#Number-to-index mapping: Since numbers are in [1, n], each number x corresponds to index x-1. This allows us to use the array itself as a hash table 
without extra space.
#Why Negate Numbers?
# Negating (making a number negative) is a way to “mark” a slot without needing extra space. For example, if we see number 4, we go to index 4-1 = 3 
and make whatever number is there negative. If we see 4 again and find that index 3 is already negative, we know 4 is a repeat.
# We use abs(nums[i]) because, as we process the array, some numbers might already be negative due to earlier markings, but we need their
original value to know which index to check.

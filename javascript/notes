var have global scope
let and const have block scope
let and const can't be re-declared in same block
const doesn't define a constant value, but a constant reference to a location
const can not be re-assigned in same block
Primitive data type: only single value can be assigned to variable
typeof null is object, but typeof undefined is undefined
typeof arry=[1,b,d] is also object
Template literal can he used to print multi line texts with breaks
Javascript don't have //, use math.floor()
const x='8", const x= '3'
x+y == 83
x-y= 5
x/y == 2.66
x%y == 2
Here the string get auto-converted to numbers internally
const x= "apple"
const y = "mango"
x-y == NaN
type- number, converting function Number
type -string, String()
type boolean, converting function Boolean()
npm install readline-sync
///////////////////////////////////////
Array destructuring
const x = [1,2,3,4,5]
const [y] = x
console.log(y) // Answer is 1
//python will give error, unpacking of python and destructuring of javascript is different
  ##################################################
forming letters array in javascript
const lowercaseAlphabet = Array.from({ length: 26 }, (_, i) => String.fromCharCode(97 + i));
___________________________________________
In JavaScript, every character in a string is stored internally as a Unicode code point (a number that represents that character).
char.charCodeAt(index)  returns the numeric code of the character at the given index.
let char = "A";
console.log(char.charCodeAt(0)); // 65


"A" → Unicode 65

"a" → Unicode 97

"z" → Unicode 122

"0" → Unicode 48

" " (space) → Unicode 32

So char.charCodeAt(0) gives you the number representing that character.



###################################################################
In JavaScript, the way you find the length depends on the type of data structure:
1. Array :- Use the .length property.
2. A Set doesn’t use .length — it has a .size property.
3. Strings also use .length.
4. Objects don’t have .length or .size by default.
Instead, you can use Object.keys() (or Object.values() / Object.entries()), then check the length of that array.
let obj = { a: 1, b: 2, c: 3 };
console.log(Object.keys(obj).length); // 3
###############################################
In JavaScript, for...in iterates over keys/indexes, not values.
for (let word in words) {} .. 
So in your loop, word is not each string, it’s the index ("0", "1", "2", …).

Use for...of to iterate directly over values:

###############

# JavaScript Loop Variants for Array Iteration

This table compares the 4 main ways to loop over arrays in JavaScript, using the **Morse Code problem** as an example.

---

## 🔹 Table of Loop Variants

| Loop Type       | Syntax                          | Behavior                                      | Example with `["gin","zen","gig","msg"]` | Correct for Morse Problem? |
|-----------------|---------------------------------|-----------------------------------------------|------------------------------------------|----------------------------|
| **Classic for** | `for (let i=0; i<words.length; i++)` | Iterates by **index**                          | `words[i]` gives `"gin"`, `"zen"`, …      | ✅ Yes |
| **for...in**    | `for (let i in words)`          | Iterates over **indexes** as strings (`"0"`, `"1"`, …) | `i` = `"0"`, `"1"`, … → need `words[i]`   | ⚠️ No (bug if used directly, unless `words[i]`) |
| **for...of**    | `for (let word of words)`       | Iterates directly over **values**              | `word` = `"gin"`, `"zen"`, `"gig"`, `"msg"` | ✅ Yes (best choice) |
| **forEach**     | `words.forEach(word => {...})`  | Executes callback on each element              | `word` = `"gin"`, `"zen"`, `"gig"`, `"msg"` | ✅ Yes |

---

## 🔹 Morse Code Examples

### 1. Classic for loop
```js
for (let i = 0; i < words.length; i++) {
    let morse = '';
    for (let char of words[i]) {
        morse += morseCode[char.charCodeAt(0) - 'a'.charCodeAt(0)];
    }
    uniqueCodes.add(morse);
}
##########################################################################################################################


